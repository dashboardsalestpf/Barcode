import streamlit as st
import barcode
from barcode.writer import ImageWriter
from PIL import Image
import gspread
from datetime import datetime
from streamlit_js_eval import streamlit_js_eval
from io import BytesIO
import pandas as pd
from google.oauth2 import service_account

# --- Setup Database Connection ---
google_cloud_secrets = st.secrets["google_cloud"]
creds = service_account.Credentials.from_service_account_info(
    {
        "type": google_cloud_secrets["type"],
        "project_id": google_cloud_secrets["project_id"],
        "private_key_id": google_cloud_secrets["private_key_id"],
        "private_key": google_cloud_secrets["private_key"].replace("\\n", "\n"),
        "client_email": google_cloud_secrets["client_email"],
        "client_id": google_cloud_secrets["client_id"],
        "auth_uri": google_cloud_secrets["auth_uri"],
        "token_uri": google_cloud_secrets["token_uri"],
        "auth_provider_x509_cert_url": google_cloud_secrets["auth_provider_x509_cert_url"],
        "client_x509_cert_url": google_cloud_secrets["client_x509_cert_url"],
        "universe_domain": google_cloud_secrets["universe_domain"],
    },
    scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"],
)

client = gspread.authorize(creds)
spreadsheet_id = "15at-sHNUtXCZZMT-COgbdg4u_IMdhrMgx9BfgbNjINg"

# --- Function untuk Mengambil Data dari Google Sheets ---
@st.cache_data(ttl=600)
def get_data(sheet_name):
    sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name).get_all_records()
    return pd.DataFrame(sheet)

def input_data(generate_code, generate_desc, sequence_number):
    sheet = client.open_by_key(spreadsheet_id).worksheet("Master")
    sheet.append_row([generate_code, generate_desc, sequence_number], value_input_option="USER_ENTERED")

# --- Load Data di Session State ---
if "numbering_sub" not in st.session_state:
    with st.spinner("Updating Numbering Sub Data . . . "):
        st.session_state.numbering_sub = get_data("Numbering Sub")

if "numbering_kategori" not in st.session_state:
    with st.spinner("Updating Numbering Kategori Data . . . "):
        st.session_state.numbering_kategori = get_data("Numbering Kategori")

if "master" not in st.session_state:
    with st.spinner("Updating Master Data . . . "):
        st.session_state.master = get_data("Master")

# --- UI Selection ---
kategori = st.selectbox("Kategori", options=["Pilih Kategori"] + sorted(st.session_state.numbering_kategori['Item Group']))
subitem = st.selectbox("Subitem", options=sorted(st.session_state.numbering_sub[st.session_state.numbering_sub['Kategori'] == kategori]['Sub Item'].unique()))
desc1 = st.text_input("Desc1", value=subitem, disabled=True)
desc2 = st.text_input("Desc2")
if not desc2:
    desc2 = " "
    desc1 = " "

generate_desc = (desc1 + " " + desc2).upper()

# --- Button Generate ---
if st.button("Generate"):
    tahun = datetime.now().year
    akronim = st.session_state.numbering_sub[st.session_state.numbering_sub['Sub Item'] == subitem]['Initial'].values[0]
    num_kat = st.session_state.numbering_kategori[st.session_state.numbering_kategori['Item Group'] == kategori]['Numbering'].values[0]
    num_sub = st.session_state.numbering_sub[st.session_state.numbering_sub['Sub Item'] == subitem]['Number Of Sub'].values[0]
    count_akronim = st.session_state.master['ItemCode'].str.contains(akronim).sum()

    # Simpan hasil ke dalam session_state
    st.session_state.generate_code = f"{akronim}-{num_kat:02d}{num_sub:02d}-{count_akronim+1:04d}"
    st.session_state.generate_desc = generate_desc
    st.session_state.sequence_number = f"{tahun}{num_kat:02d}{num_sub:02d}{count_akronim+1:04d}"

    # Generate barcode
    barcode_format = barcode.get_barcode_class('code128')
    barcode_object = barcode_format(st.session_state.sequence_number, writer=ImageWriter())

    barcode_bytes = BytesIO()
    barcode_object.write(barcode_bytes, {"module_height": 8, "module_width": 0.3, "dpi": 200})
    barcode_bytes.seek(0)

    # Simpan barcode di session state
    st.session_state.barcode_image = barcode_bytes

    # Simpan data ke Google Sheets
    input_data(st.session_state.generate_code, st.session_state.generate_desc, st.session_state.sequence_number)

# --- Menampilkan Hasil Jika Sudah Dihasilkan ---
if "generate_code" in st.session_state:
    st.text_input("ItemCode", value=st.session_state.generate_code, disabled=True)
    st.text_input("Generated Description", value=st.session_state.generate_desc, disabled=True)
    st.text_input("Sequence Number", value=st.session_state.sequence_number, disabled=True)

    # Menampilkan barcode
    barcode_image = Image.open(st.session_state.barcode_image)
    st.image(barcode_image, width=300)

    # Download barcode tanpa menghilangkan hasil
    st.download_button("Download Barcode", st.session_state.barcode_image, "barcode.png", "image/png")
    if st.button("Reset"):
        streamlit_js_eval(js_expressions="parent.window.location.reload()")
